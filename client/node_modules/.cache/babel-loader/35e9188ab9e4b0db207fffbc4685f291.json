{"ast":null,"code":"import _objectSpread from \"/Users/enobassey/Projects/React/crown-clothing/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBp0zt77ULCgmuC1Qyvx8OqD6dU_BEsJeA\",\n  authDomain: \"crown-db-77d0a.firebaseapp.com\",\n  databaseURL: \"https://crown-db-77d0a.firebaseio.com\",\n  projectId: \"crown-db-77d0a\",\n  storageBucket: \"crown-db-77d0a.appspot.com\",\n  messagingSenderId: \"681606407387\",\n  appId: \"1:681606407387:web:eab7cf0a83ade36e24d8fe\",\n  measurementId: \"G-VZV9LWHT1W\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  console.log(firestore.doc(`users/${userAuth.uid}`));\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const _doc$data = doc.data(),\n          title = _doc$data.title,\n          items = _doc$data.items;\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/enobassey/Projects/React/crown-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","initializeApp","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","data","title","items","routeName","encodeURI","toLowerCase","id","reduce","accumulator","auth","googleProvider","GoogleAuthProvider","provider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/auth'\n\nconst config = {\n    apiKey: \"AIzaSyBp0zt77ULCgmuC1Qyvx8OqD6dU_BEsJeA\",\n    authDomain: \"crown-db-77d0a.firebaseapp.com\",\n    databaseURL: \"https://crown-db-77d0a.firebaseio.com\",\n    projectId: \"crown-db-77d0a\",\n    storageBucket: \"crown-db-77d0a.appspot.com\",\n    messagingSenderId: \"681606407387\",\n    appId: \"1:681606407387:web:eab7cf0a83ade36e24d8fe\",\n    measurementId: \"G-VZV9LWHT1W\"\n}\n\nexport const createUserProfileDocument = async (userAuth, additionalData)=> {\n    if(!userAuth) return;\n\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\n    \n    const snapShot = await userRef.get();\n\n    if(!snapShot.exists){\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try{\n            await userRef.set({\n                displayName,\n                email,\n                createdAt, \n                ...additionalData\n            })\n        }\n        catch(error){\n            console.log('error creating user', error.message)\n        }\n    }\n\n    console.log(firestore.doc(`users/${userAuth.uid}`))\n    return userRef;\n}\n\nfirebase.initializeApp(config);\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n    const collectionRef = firestore.collection(collectionKey);\n\n    const batch = firestore.batch();\n\n    objectsToAdd.forEach(\n        obj => {\n            const newDocRef = collectionRef.doc();\n            batch.set(newDocRef, obj);\n\n        }\n    )\n    return await batch.commit();\n}\n\nexport const convertCollectionsSnapshotToMap = collections => {\n    const transformedCollection = collections.docs.map(doc => {\n        const {\n            title,\n            items\n        } = doc.data();\n\n        return {\n            routeName: encodeURI(title.toLowerCase()),\n            id: doc.id,\n            title,\n            items\n        };\n    });\n\n    return transformedCollection.reduce((accumulator, collection) => {\n        accumulator[collection.title.toLowerCase()] = collection;\n        return accumulator;\n    }, {});\n};\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account'});\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;\n\n"]},"metadata":{},"sourceType":"module"}